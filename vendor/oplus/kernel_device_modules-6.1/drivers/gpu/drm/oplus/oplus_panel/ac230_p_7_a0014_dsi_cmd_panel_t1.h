#ifndef PANEL_AC230_P_7_A0014_T1_H
#define PANEL_AC230_P_7_A0014_T1_H

#define REGFLAG_CMD				0xFFFA
#define REGFLAG_DELAY			0xFFFC
#define REGFLAG_UDELAY			0xFFFB
#define REGFLAG_END_OF_TABLE	0xFFFD

/* Mode Config */
#define MODE_NUM                    3
#define RES_NUM                     (2)
#define MODE_MAPPING_RULE(x)        ((x) % (MODE_NUM))
static enum RES_SWITCH_TYPE res_switch_type = RES_SWITCH_NO_USE;

enum MODE_ID {
	FHD_SDC60 = 0,
	FHD_SDC90 = 1,
	FHD_SDC120 = 2,
};
enum SEED_MODE_ID {
	VIVID = 100,
	EXPERT = 101,
	NATURAL = 102,
};

struct LCM_setting_table {
	unsigned int cmd;
	unsigned int count;
	unsigned char para_list[256];
};

struct LCM_setting_table init_setting_60Hz[] = {
	//corner on
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x07}},
	{REGFLAG_CMD, 2, {0xC0,0x07}},
	//Demura On
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x04}},
	{REGFLAG_CMD, 2, {0xCA,0x01}},
	//GIR code
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x08}},
	{REGFLAG_CMD, 2, {0xBE,0x03}},
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x0B}},
	{REGFLAG_CMD, 2, {0xFD,0x04}},

	//LHBM
	{REGFLAG_CMD, 10, {0x88,0x01,0x02,0x76,0x09,0xBF,0x00,0x00,0x00,0x00}},

	//OSC1 121.9MHz
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x31}},
	{REGFLAG_CMD, 3, {0xF8,0x01,0xBD}},

	//OSC2 138.6MHz
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x15}},
	{REGFLAG_CMD, 3, {0xF8,0x01,0x8C}},

	//TE Mask
	{REGFLAG_CMD, 2, {0x5A,0x01}},

	//POWER off SEQ
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x0A}},
	{REGFLAG_CMD, 6, {0xF6,0x70,0x70,0x70,0x70,0x70}},

	//Skip Frame TE
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x0D}},
	{REGFLAG_CMD, 2, {0xFB,0x80}},

	//Improve EM pulse multi to one
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0xE5,0x00}},
	
	//enable fskip_extend vfp function
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x0C}},
	{REGFLAG_CMD, 2, {0xFD,0x08}},

	//AOD_WB timing
	{REGFLAG_CMD, 2, {0x6F,0x02}},
	{REGFLAG_CMD, 2, {0xF9,0x84}},

	//chopper@Skip timing adjust
	{REGFLAG_CMD, 2, {0x6F,0x10}},
	{REGFLAG_CMD, 2, {0xFB,0x40}},

	//Power Saving for SKIP Frame
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x48}},
	{REGFLAG_CMD, 2, {0xF2,0x00}},

	//Dynamic ISOP
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x16}},
	{REGFLAG_CMD, 3, {0xF4,0x02,0x74}},

	//Disable VOLTP OUTPUT for power saving
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x42}},
	{REGFLAG_CMD, 2, {0xF4,0x00}},
	//for powersaving option
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x49}},
	{REGFLAG_CMD, 2, {0xF2,0x10}},

	//source vporch optimize
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x05}},
	{REGFLAG_CMD, 3, {0xFE,0x3C,0x3C}},
	//mipi timing
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x82}},
	{REGFLAG_CMD, 2, {0x6F,0x09}},
	{REGFLAG_CMD, 2, {0xF2,0xFF}},

	//RM=1,DM=0
	{REGFLAG_CMD, 2, {0x17,0x30}},
	// 60Hz
	{REGFLAG_CMD, 2, {0x2F,0x03}},
	//GIRONLIRONAPLAutoSwitchOFF
	{REGFLAG_CMD, 3, {0x5F,0x00,0x00}},
	//TEOn
	{REGFLAG_CMD, 2, {0x35,0x00}},
	//BCTRL=1,DD=0
	{REGFLAG_CMD, 2, {0x53,0x20}},
	{REGFLAG_CMD, 5, {0x2A,0x00,0x00,0x04,0xE7}},
	{REGFLAG_CMD, 5, {0x2B,0x00,0x00,0x0A,0xC7}},

	// VESA setting
	{REGFLAG_CMD, 3, {0x90,0x03,0x43}},
	{REGFLAG_CMD, 19, {0x91,0xAB,0xA8,0x00,0x0C,0xC2,0x00,0x02,0x3B,0x01,0x35,0x00,0x08,0x08,0xBB,0x07,0x44,0x10,0xF0}},
	//GC=1
	{REGFLAG_CMD, 2, {0x26,0x00}},
	//ELVSS SLECT TB offset table
	{REGFLAG_CMD, 3, {0x81,0x01,0x4B}},
	//SWIRE timing/position control
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x00}},
	{REGFLAG_CMD, 2, {0x6F,0x03}},
	{REGFLAG_CMD, 2, {0xB5,0xC5}},
	//Internal Regulator ON
	{REGFLAG_CMD, 2, {0x6F,0x08}},
	{REGFLAG_CMD, 2, {0xD5,0x00}},

	//SWIRE I/F enable
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0xCE,0x00}},
	//AVEE C/P
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0x6F,0x06}},
	{REGFLAG_CMD, 4, {0xB3,0x44,0x44,0x44}},

	{REGFLAG_CMD, 1, {0x11}},
	{REGFLAG_DELAY, 120, {} },
	{REGFLAG_CMD, 1, {0x29}},
};

struct LCM_setting_table init_setting_90Hz[] = {
	//corner on
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x07}},
	{REGFLAG_CMD, 2, {0xC0,0x07}},
	//Demura On
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x04}},
	{REGFLAG_CMD, 2, {0xCA,0x01}},
	//GIR code
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x08}},
	{REGFLAG_CMD, 2, {0xBE,0x03}},
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x0B}},
	{REGFLAG_CMD, 2, {0xFD,0x04}},

	//LHBM
	{REGFLAG_CMD, 10, {0x88,0x01,0x02,0x76,0x09,0xBF,0x00,0x00,0x00,0x00}},

	//OSC1 121.9MHz
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x31}},
	{REGFLAG_CMD, 3, {0xF8,0x01,0xBD}},

	//OSC2 138.6MHz
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x15}},
	{REGFLAG_CMD, 3, {0xF8,0x01,0x8C}},

	//TE Mask
	{REGFLAG_CMD, 2, {0x5A,0x01}},

	//POWER off SEQ
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x0A}},
	{REGFLAG_CMD, 6, {0xF6,0x70,0x70,0x70,0x70,0x70}},

	//Skip Frame TE
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x0D}},
	{REGFLAG_CMD, 2, {0xFB,0x80}},

	//Improve EM pulse multi to one
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0xE5,0x00}},

	//enable fskip_extend vfp function
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x0C}},
	{REGFLAG_CMD, 2, {0xFD,0x08}},

	//AOD_WB timing
	{REGFLAG_CMD, 2, {0x6F,0x02}},
	{REGFLAG_CMD, 2, {0xF9,0x84}},

	//chopper@Skip timing adjust
	{REGFLAG_CMD, 2, {0x6F,0x10}},
	{REGFLAG_CMD, 2, {0xFB,0x40}},

	//Power Saving for SKIP Frame
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x48}},
	{REGFLAG_CMD, 2, {0xF2,0x00}},

	//Dynamic ISOP
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x16}},
	{REGFLAG_CMD, 3, {0xF4,0x02,0x74}},

	//Disable VOLTP OUTPUT for power saving
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x42}},
	{REGFLAG_CMD, 2, {0xF4,0x00}},
	//for powersaving option
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x49}},
	{REGFLAG_CMD, 2, {0xF2,0x10}},

	//source vporch optimize
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x05}},
	{REGFLAG_CMD, 3, {0xFE,0x3C,0x3C}},
	//mipi timing
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x82}},
	{REGFLAG_CMD, 2, {0x6F,0x09}},
	{REGFLAG_CMD, 2, {0xF2,0xFF}},

	//RM=1,DM=0
	{REGFLAG_CMD, 2, {0x17,0x30}},
	//90Hz
	{REGFLAG_CMD, 2, {0x2F,0x02}},
	//GIRONLIRONAPLAutoSwitchOFF
	{REGFLAG_CMD, 3, {0x5F,0x00,0x00}},
	//TEOn
	{REGFLAG_CMD, 2, {0x35,0x00}},
	//BCTRL=1,DD=0
	{REGFLAG_CMD, 2, {0x53,0x20}},
	{REGFLAG_CMD, 5, {0x2A,0x00,0x00,0x04,0xE7}},
	{REGFLAG_CMD, 5, {0x2B,0x00,0x00,0x0A,0xC7}},

	// VESA setting
	{REGFLAG_CMD, 3, {0x90,0x03,0x43}},
	{REGFLAG_CMD, 19, {0x91,0xAB,0xA8,0x00,0x0C,0xC2,0x00,0x02,0x3B,0x01,0x35,0x00,0x08,0x08,0xBB,0x07,0x44,0x10,0xF0}},
	//GC=1
	{REGFLAG_CMD, 2, {0x26,0x00}},
	//ELVSS SLECT TB offset table
	{REGFLAG_CMD, 3, {0x81,0x01,0x4B}},
	//SWIRE timing/position control
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x00}},
	{REGFLAG_CMD, 2, {0x6F,0x03}},
	{REGFLAG_CMD, 2, {0xB5,0xC5}},
	//Internal Regulator ON
	{REGFLAG_CMD, 2, {0x6F,0x08}},
	{REGFLAG_CMD, 2, {0xD5,0x00}},

	//SWIRE I/F enable
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0xCE,0x00}},
	//AVEE C/P
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0x6F,0x06}},
	{REGFLAG_CMD, 4, {0xB3,0x44,0x44,0x44}},

	{REGFLAG_CMD, 1, {0x11}},
	{REGFLAG_DELAY, 120, {} },
	{REGFLAG_CMD, 1, {0x29}},
};

struct LCM_setting_table init_setting_120Hz[] = {
	//corner on
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x07}},
	{REGFLAG_CMD, 2, {0xC0,0x07}},
	//Demura On
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x04}},
	{REGFLAG_CMD, 2, {0xCA,0x01}},
	//GIR code
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x08}},
	{REGFLAG_CMD, 2, {0xBE,0x03}},
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x0B}},
	{REGFLAG_CMD, 2, {0xFD,0x04}},

	//LHBM
	{REGFLAG_CMD, 10, {0x88,0x01,0x02,0x76,0x09,0xBF,0x00,0x00,0x00,0x00}},

	//OSC1 121.9MHz
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x31}},
	{REGFLAG_CMD, 3, {0xF8,0x01,0xBD}},

	//OSC2 138.6MHz
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x15}},
	{REGFLAG_CMD, 3, {0xF8,0x01,0x8C}},

	//TE Mask
	{REGFLAG_CMD, 2, {0x5A,0x01}},

	//POWER off SEQ
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x0A}},
	{REGFLAG_CMD, 6, {0xF6,0x70,0x70,0x70,0x70,0x70}},

	//Skip Frame TE
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x0D}},
	{REGFLAG_CMD, 2, {0xFB,0x80}},

	//Improve EM pulse multi to one
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0xE5,0x00}},

	//enable fskip_extend vfp function
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x0C}},
	{REGFLAG_CMD, 2, {0xFD,0x08}},

	//AOD_WB timing
	{REGFLAG_CMD, 2, {0x6F,0x02}},
	{REGFLAG_CMD, 2, {0xF9,0x84}},

	//chopper@Skip timing adjust
	{REGFLAG_CMD, 2, {0x6F,0x10}},
	{REGFLAG_CMD, 2, {0xFB,0x40}},

	//Power Saving for SKIP Frame
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x48}},
	{REGFLAG_CMD, 2, {0xF2,0x00}},

	//Dynamic ISOP
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x16}},
	{REGFLAG_CMD, 3, {0xF4,0x02,0x74}},

	//Disable VOLTP OUTPUT for power saving
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x42}},
	{REGFLAG_CMD, 2, {0xF4,0x00}},
	//for powersaving option
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 2, {0x6F,0x49}},
	{REGFLAG_CMD, 2, {0xF2,0x10}},

	//source vporch optimize
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x81}},
	{REGFLAG_CMD, 2, {0x6F,0x05}},
	{REGFLAG_CMD, 3, {0xFE,0x3C,0x3C}},
	//mipi timing
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x82}},
	{REGFLAG_CMD, 2, {0x6F,0x09}},
	{REGFLAG_CMD, 2, {0xF2,0xFF}},

	//RM=1,DM=0
	{REGFLAG_CMD, 2, {0x17,0x30}},
	//120Hz
	{REGFLAG_CMD, 2, {0x2F,0x01}},
	//GIRONLIRONAPLAutoSwitchOFF
	{REGFLAG_CMD, 3, {0x5F,0x00,0x00}},
	//TEOn
	{REGFLAG_CMD, 2, {0x35,0x00}},
	//BCTRL=1,DD=0
	{REGFLAG_CMD, 2, {0x53,0x20}},
	{REGFLAG_CMD, 5, {0x2A,0x00,0x00,0x04,0xE7}},
	{REGFLAG_CMD, 5, {0x2B,0x00,0x00,0x0A,0xC7}},

	// VESA setting
	{REGFLAG_CMD, 3, {0x90,0x03,0x43}},
	{REGFLAG_CMD, 19, {0x91,0xAB,0xA8,0x00,0x0C,0xC2,0x00,0x02,0x3B,0x01,0x35,0x00,0x08,0x08,0xBB,0x07,0x44,0x10,0xF0}},
	//GC=1
	{REGFLAG_CMD, 2, {0x26,0x00}},
	//ELVSS SLECT TB offset table
	{REGFLAG_CMD, 3, {0x81,0x01,0x4B}},
	//SWIRE timing/position control
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x00}},
	{REGFLAG_CMD, 2, {0x6F,0x03}},
	{REGFLAG_CMD, 2, {0xB5,0xC5}},
	//Internal Regulator ON
	{REGFLAG_CMD, 2, {0x6F,0x08}},
	{REGFLAG_CMD, 2, {0xD5,0x00}},

	//SWIRE I/F enable
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0xCE,0x00}},
	//AVEE C/P
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0x6F,0x06}},
	{REGFLAG_CMD, 4, {0xB3,0x44,0x44,0x44}},

	{REGFLAG_CMD, 1, {0x11}},
	{REGFLAG_DELAY, 120, {} },
	{REGFLAG_CMD, 1, {0x29}},
};

/* -------------------------demura setting start---------------------- */
static struct LCM_setting_table dsi_demura0_bl[] = {
    /* demura0 level < 0x481 */
    {REGFLAG_CMD, 6, {0xF0, 0x55, 0xAA, 0x52, 0x08, 0x00}},
    {REGFLAG_CMD, 2, {0x6F, 0x31}},
    {REGFLAG_CMD, 3, {0xC0, 0x01, 0x20}},
    {REGFLAG_CMD, 2, {0x6F, 0x33}},
    {REGFLAG_CMD, 4, {0xC0, 0x03, 0x33, 0x00}},
    {REGFLAG_CMD, 6, {0xF0, 0x55, 0xAA, 0x52, 0x08, 0x04}},
    {REGFLAG_CMD, 2, {0x6F, 0x01}},
    {REGFLAG_CMD, 6, {0xCB, 0x08, 0x10, 0x1E, 0x78, 0xE1}},
    {REGFLAG_CMD, 2, {0x6F, 0x06}},
    {REGFLAG_CMD, 10, {0xCB, 0x00, 0x08, 0xCF, 0x12, 0x63, 0x24, 0x34, 0x05, 0x81}},
};

static struct LCM_setting_table dsi_demura1_bl[] = {
    /* demura1 0x481 < level <= 0xffe */
    {REGFLAG_CMD, 6, {0xF0, 0x55, 0xAA, 0x52, 0x08, 0x00}},
    {REGFLAG_CMD, 2, {0x6F, 0x31}},
    {REGFLAG_CMD, 3, {0xC0, 0x67, 0x80}},
    {REGFLAG_CMD, 2, {0x6F, 0x33}},
    {REGFLAG_CMD, 4, {0xC0, 0x04, 0x44, 0x00}},
    {REGFLAG_CMD, 6, {0xF0, 0x55, 0xAA, 0x52, 0x08, 0x04}},
    {REGFLAG_CMD, 2, {0x6F, 0x01}},
    {REGFLAG_CMD, 6, {0xCB, 0x03, 0x08, 0x1E, 0x78, 0xE1}},
    {REGFLAG_CMD, 2, {0x6F, 0x06}},
    {REGFLAG_CMD, 10, {0xCB, 0x48, 0x82, 0x52, 0xAD, 0x38, 0xBB, 0xEF, 0xB4, 0xFF}},
};
/* -------------------------demura setting end------------------------- */

#ifdef OPLUS_FEATURE_DISPLAY_ONSCREENFINGERPRINT
/* aod/fod command */
struct LCM_setting_table aod_on_cmd[] = {
	/* AOD Mode ON */
	{REGFLAG_CMD, 2, {0x39,0x2C}},
	{REGFLAG_CMD, 2, {0x6F,0x04}},
	{REGFLAG_CMD, 3, {0x51,0x03,0xFF}},
};

struct LCM_setting_table aod_off_cmd[] = {
	{REGFLAG_CMD, 1, {0x38}},
	{REGFLAG_CMD, 3, {0x51,0x00,0x00}},
};

struct LCM_setting_table aod_off_cmd_insert_black[] = {
        {REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x00}},
	{REGFLAG_CMD, 2, {0xC0,0x70}},
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x01}},
	{REGFLAG_CMD, 2, {0x6F,0x01}},
	{REGFLAG_CMD, 2, {0xD2,0x11}},
	{REGFLAG_CMD, 1, {0x38}},
	{REGFLAG_CMD, 3, {0x51,0x00,0x00}},
};

struct LCM_setting_table aod_high_mode[] = {
	{REGFLAG_CMD, 2, {0x6F,0x04}},
	{REGFLAG_CMD, 3, {0x51,0x02,0xFF}},
};

struct LCM_setting_table aod_low_mode[] = {
	{REGFLAG_CMD, 2, {0x6F,0x04}},
	{REGFLAG_CMD, 3, {0x51,0x01,0xFF}},
};

struct LCM_setting_table hbm_on_cmd[] = {
	{REGFLAG_CMD, 3, {0x51,0x0F,0x94}},
};

struct LCM_setting_table hbm_off_cmd[] = {
	{REGFLAG_CMD, 3, {0x51,0x0D,0xBB}},
};

struct LCM_setting_table lhbm_pressed_icon_gamma_cmd[] = {
};

struct LCM_setting_table lhbm_pressed_icon_grayscale_cmd[] = {
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x08}},
	{REGFLAG_CMD, 2, {0x6F,0x4A}},
	{REGFLAG_CMD, 5, {0xB8,0x00,0x00,0x00,0x00}},
};

struct LCM_setting_table lhbm_pressed_icon_on_cmd_dc[] = {
	{REGFLAG_CMD, 13, {0xA9,0x02,0x00,0xDF,0x31,0x31,0x06,0x01,0x00,0x87,0x00,0x00,0x05}},
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x04}},
	{REGFLAG_CMD, 2, {0xCB,0x37}},
	{REGFLAG_CMD, 2, {0x8B,0x10}},
};

struct LCM_setting_table lhbm_pressed_icon_on_cmd_pwm[] = {
	{REGFLAG_CMD, 13, {0xA9,0x02,0x00,0xDF,0x31,0x31,0x16,0x01,0x00,0x87,0x00,0x00,0x25}},
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x04}},
	{REGFLAG_CMD, 2, {0xCB,0x37}},
	{REGFLAG_CMD, 2, {0x8B,0x10}},
};

struct LCM_setting_table lhbm_pressed_icon_off_cmd[] = {
	{REGFLAG_CMD, 2, {0x87,0x00}},
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x04}},
	{REGFLAG_CMD, 2, {0xCB,0x27}},
	{REGFLAG_CMD, 2, {0x8B,0x00}},
};

static struct LCM_setting_table gamma_compensation[] = {
    {REGFLAG_CMD, 6, {0xF0, 0x55, 0xAA, 0x52, 0x08, 0x02}},
    {REGFLAG_CMD, 7, {0xD1, 0x24, 0xFF, 0x22, 0x00, 0x29, 0xFF}},
};
#endif /* OPLUS_FEATURE_DISPLAY_ONSCREENFINGERPRINT */

struct LCM_setting_table mode_switch_to_60[] = {
    {REGFLAG_CMD, 2, {0x2F,0x03}},
};

struct LCM_setting_table mode_switch_to_90[] = {
    {REGFLAG_CMD, 2, {0x2F,0x02}},
};

struct LCM_setting_table mode_switch_to_120[] = {
    {REGFLAG_CMD, 2, {0x2F,0x01}},
};

struct LCM_setting_table dsi_set_backlight[] = {
	{REGFLAG_CMD, 5, {0xFF,0xAA,0x55,0xA5,0x80}},
	{REGFLAG_CMD, 3, {0x51,0x00,0x00}},
	/*long write EOT to the end*/
	{REGFLAG_CMD, 3,  {0x00,0x00,0x00}},
};

/* ---------------panel seed setting --------------- */
struct LCM_setting_table dsi_set_seed_natural[] = {
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x00}},
	{REGFLAG_CMD, 2, {0x5F,0x04}},
};
struct LCM_setting_table dsi_set_seed_expert[] = {
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x00}},
	{REGFLAG_CMD, 2, {0x5F,0x00}},
};
struct LCM_setting_table dsi_set_seed_vivid[] = {
	{REGFLAG_CMD, 6, {0xF0,0x55,0xAA,0x52,0x08,0x00}},
	{REGFLAG_CMD, 2, {0x5F,0x05}},
};
struct LCM_setting_table dsi_switch_hbm_apl_on[] = {

};

struct LCM_setting_table dsi_switch_hbm_apl_off[] = {

};
#endif
